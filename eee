import os
import time
import csv
import subprocess
from scapy.all import sniff, Dot11, Dot11Elt

# Configuration
USE_WLAN0_ONLY = 0  # Set to 1 to use only wlan0
MONITOR_CARDS = ["wlan0", "wlan1", "wlan2", "wlan3"]  # List of your Wi-Fi cards
LISTEN_CHANNEL = 6  # Change to your desired channel

# Function to put Wi-Fi cards in monitor mode
def set_monitor_mode():
    for card in MONITOR_CARDS:
        if os.path.exists(f"/sys/class/net/{card}"):
            subprocess.call(["sudo", "ifconfig", card, "down"])
            subprocess.call(["sudo", "iw", card, "set", "type", "monitor"])
            subprocess.call(["sudo", "ifconfig", card, "up"])
            print(f"{card} set to monitor mode")
        else:
            print(f"{card} does not exist")

# Function to capture packets
def packet_callback(packet):
    try:
        # Extract details from the packet
        if packet.haslayer(Dot11):
            ssid = packet[Dot11].info.decode(errors='ignore') if packet.haslayer(Dot11Elt) else None
            rssi = packet.dBm_AntSignal

            # Check if the noise level is available
            noise = None
            if hasattr(packet, 'dBm_noise'):
                noise = packet.dBm_noise
            else:
                noise = 'N/A'  # Set to a default value if not available

            # Log to CSV
            with open("wifi_data.csv", mode='a') as file:
                writer = csv.writer(file)
                writer.writerow([time.time(), ssid, rssi, noise])

    except Exception as e:
        print(f"Error processing packet: {e}")

# Function to run the monitoring indefinitely
def run_monitoring():
    while True:
        try:
            if USE_WLAN0_ONLY == 1:
                # Only use wlan0
                cards_to_use = ["wlan0"]
            else:
                # Use all defined monitor cards
                cards_to_use = MONITOR_CARDS
            
            for card in cards_to_use:
                print(f"Listening on {card}...")
                sniff(iface=card, prn=packet_callback, store=0)

        except Exception as e:
            print(f"An error occurred: {e}. Restarting script...")
            time.sleep(5)  # Delay before restarting the monitoring

if __name__ == "__main__":
    # Set monitor mode on all cards
    set_monitor_mode()
    # Start monitoring
    run_monitoring()
